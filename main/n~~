local ui = {
	scale = 0,
	gui_screen = nil,
	background = nil,
	section = 'nil',
	notify = loadstring(game:HttpGet('https://raw.githubusercontent.com/flezzpe/Nurysium/main/notify_UI.lua'))()
}

ui.notify.init(game:GetService('CoreGui'))

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local color_shader = Instance.new("ColorCorrectionEffect", workspace.CurrentCamera)
local blur_shader = Instance.new("BlurEffect", workspace.CurrentCamera)

local is_mobile = UserInputService.TouchEnabled

if not is_mobile then
	blur_shader.Size = 56
	color_shader.Saturation = -1
	color_shader.Contrast = 0.5
end

local function animate_elements(speed: number)
	ui.background["Functions"].UIListLayout.Padding = UDim.new(0.45, 0)

	TweenService:Create(ui.background["Functions"].UIListLayout, TweenInfo.new(speed, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Padding = UDim.new(0.013, 0)
	}):Play()
end

function ui:open()
	TweenService:Create(color_shader, TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Saturation = -1,
		Contrast = 0.5
	}):Play()

	TweenService:Create(blur_shader, TweenInfo.new(0.65, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Size = 56
	}):Play()

	task.delay(0.65, function()
		ui.background.line.Visible = true
		ui.background.Sections.Visible = true
		ui.background.Functions.Visible = true
	end)

	TweenService:Create(ui.background.Functions.UIListLayout, TweenInfo.new(2, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Padding = UDim.new(0.013, 0)
	}):Play()

	TweenService:Create(ui.background, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Size = UDim2.new(0.36, 0, 0.36, 0),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		BackgroundTransparency = 0.025
	}):Play()
end

function ui:close()
	TweenService:Create(color_shader, TweenInfo.new(1.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Saturation = 0,
		Contrast = 0
	}):Play()

	TweenService:Create(blur_shader, TweenInfo.new(0.65, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Size = 0
	}):Play()

	task.delay(0.65, function()
		ui.background.line.Visible = false
		ui.background.Sections.Visible = false
		ui.background.Functions.Visible = false
	end)

	TweenService:Create(ui.background.Functions.UIListLayout, TweenInfo.new(2, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Padding = UDim.new(0.1, 0)
	}):Play()

	TweenService:Create(ui.background, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
		Size = UDim2.new(0, 0, 0, 0),
		Position = UDim2.new(0.5, 0, 1, 0),
		BackgroundTransparency = 1
	}):Play()
end

function ui.get_ratio()
	local x = workspace.CurrentCamera.ViewportSize.X
	local y = workspace.CurrentCamera.ViewportSize.Y

	local screen_size = (x + y) / 3000

	ui.scale = screen_size + math.max(0.85 - screen_size, 0)
end

function ui.init(draggable: boolean, parent: any)
	ui.gui_screen = Instance.new('ScreenGui')
	ui.gui_screen.Parent = parent

	ui.background = Instance.new("Frame", ui.gui_screen)

	local ratio_fix = Instance.new("UIAspectRatioConstraint")
	local UICorner = Instance.new("UICorner")
	local backgroundShadow = Instance.new("ImageLabel")
	local Sections = Instance.new("ScrollingFrame")
	local UIListLayout = Instance.new("UIListLayout")
	local UIPadding = Instance.new("UIPadding")
	local line = Instance.new("Frame")
	local Functions = Instance.new("ScrollingFrame")
	local UIListLayout_2 = Instance.new("UIListLayout")
	local UIPadding_2 = Instance.new("UIPadding")
	local UIStroke = Instance.new("UIStroke")

	ui.background.Name = "background"
	ui.background.BackgroundColor3 = Color3.fromRGB(11, 11, 10)
	ui.background.BackgroundTransparency = 0.025
	ui.background.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ui.background.BorderSizePixel = 0
	ui.background.Position = UDim2.new(0.5, 0, 0.5, 0)
	ui.background.Size = UDim2.new(0.36, 0, 0.36, 0)
	ui.background.ZIndex = 2
	ui.background.AnchorPoint = Vector2.new(0.5, 0.5)

	ratio_fix.Parent = ui.background
	ratio_fix.AspectRatio = 1.38

	UICorner.CornerRadius = UDim.new(0, 15)
	UICorner.Parent = ui.background

	backgroundShadow.Name = "backgroundShadow"
	backgroundShadow.Parent = ui.background
	backgroundShadow.AnchorPoint = Vector2.new(0.5, 0.5)
	backgroundShadow.BackgroundTransparency = 1.000
	backgroundShadow.Position = UDim2.new(0.5, 0, 0.5, 2)
	backgroundShadow.Size = UDim2.new(1, 127, 1, 127)
	backgroundShadow.Image = "rbxassetid://12817543352"
	backgroundShadow.ImageTransparency = 0.400
	backgroundShadow.ScaleType = Enum.ScaleType.Slice
	backgroundShadow.SliceCenter = Rect.new(85, 85, 427, 427)

	Sections.Name = "Sections"
	Sections.Parent = ui.background
	Sections.Active = true
	Sections.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Sections.BackgroundTransparency = 1.000
	Sections.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Sections.BorderSizePixel = 0
	Sections.Position = UDim2.new(0, 0, 1.43380973e-07, 0)
	Sections.Size = UDim2.new(0.0959975496, 0, 0.999999702, 0)
	Sections.ZIndex = 2
	Sections.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	Sections.ScrollBarThickness = 0

	UIListLayout.Parent = Sections
	UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0.0199999996, 0)

	UIPadding.Parent = Sections
	UIPadding.PaddingLeft = UDim.new(0.100000001, 0)
	UIPadding.PaddingTop = UDim.new(0.0450000018, 0)

	line.Name = "line"
	line.Parent = ui.background
	line.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	line.BackgroundTransparency = 0.250
	line.BorderColor3 = Color3.fromRGB(0, 0, 0)
	line.BorderSizePixel = 0
	line.Position = UDim2.new(0.100873634, 0, -1.43380973e-07, 0)
	line.Size = UDim2.new(0.00260593859, 0, 1, 0)
	line.ZIndex = 5

	Functions.Name = "Functions"
	Functions.Parent = ui.background
	Functions.Active = true
	Functions.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Functions.BackgroundTransparency = 1.000
	Functions.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Functions.BorderSizePixel = 0
	Functions.Position = UDim2.new(0.14448902, 0, 0.0399188399, 0)
	Functions.Size = UDim2.new(0.813936114, 0, 0.91666007, 0)
	Functions.ZIndex = 2
	Functions.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	Functions.ScrollBarThickness = 0

	UIListLayout_2.Parent = Functions
	UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout_2.Padding = UDim.new(0.0125000002, 0)

	UIPadding_2.Parent = Functions
	UIPadding_2.PaddingTop = UDim.new(0.0149999997, 0)

	UIStroke.Parent = ui.background
	UIStroke.Color = Color3.fromRGB(48, 48, 48)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

	task.defer(function()
		if draggable then
			local function drag_script()

				local script = Instance.new('LocalScript', ui.background)
				local runService = (game:GetService("RunService"));

				local gui = script.Parent

				local dragging
				local dragInput
				local dragStart
				local startPos

				local function Lerp(a, b, m)
					return a + (b - a) * m
				end;

				local lastMousePos
				local lastGoalPos
				local DRAG_SPEED = (9);

				local function Update(dt)
					if not (startPos) then return end;
					if not (dragging) and (lastGoalPos) then
						gui.Position = UDim2.new(startPos.X.Scale, Lerp(gui.Position.X.Offset, lastGoalPos.X.Offset, dt * DRAG_SPEED), startPos.Y.Scale, Lerp(gui.Position.Y.Offset, lastGoalPos.Y.Offset, dt * DRAG_SPEED))
						return 
					end;

					local delta = (lastMousePos - UserInputService:GetMouseLocation())
					local xGoal = (startPos.X.Offset - delta.X);
					local yGoal = (startPos.Y.Offset - delta.Y);
					lastGoalPos = UDim2.new(startPos.X.Scale, xGoal, startPos.Y.Scale, yGoal)
					gui.Position = UDim2.new(startPos.X.Scale, Lerp(gui.Position.X.Offset, xGoal, dt * DRAG_SPEED), startPos.Y.Scale, Lerp(gui.Position.Y.Offset, yGoal, dt * DRAG_SPEED))
				end;

				gui.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						dragging = true
						dragStart = input.Position
						startPos = gui.Position
						lastMousePos = UserInputService:GetMouseLocation()

						input.Changed:Connect(function()
							if input.UserInputState == Enum.UserInputState.End then
								dragging = false
							end
						end)
					end
				end)

				gui.InputChanged:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
						dragInput = input
					end
				end)

				runService.Heartbeat:Connect(Update)
			end

			coroutine.wrap(drag_script)()
		end
	end)

	UserInputService.InputEnded:Connect(function(input, is_event)
		if not is_event and (input.KeyCode == Enum.KeyCode.RightShift or input.KeyCode == Enum.KeyCode.Insert)  then

			if not ui.gui_screen.Enabled then
				ui:open()

				task.delay(0.15, function()
					ui.gui_screen.Enabled = true
				end)
			else
				ui:close()

				task.delay(0.5, function()
					ui.gui_screen.Enabled = false
				end)
			end
		end
	end)
end

function ui.create_section(name: string, image_id: number)
	local Example = Instance.new("ImageButton", ui.background.Sections)
	local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")

	Example.Name = name
	Example.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Example.BackgroundTransparency = 1.000
	Example.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Example.BorderSizePixel = 0
	Example.Position = UDim2.new(0.320491582, 0, 0.050743565, 0)
	Example.Size = UDim2.new(0.462132096, 0, 0.0316272825, 0)
	Example.ZIndex = 5
	Example.Image = `rbxassetid://{image_id}`
	Example.ImageTransparency = 1

	UIAspectRatioConstraint.Parent = Example
	UIAspectRatioConstraint.AspectRatio = 0.993

	TweenService:Create(Example, TweenInfo.new(1.35, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()

	Example.MouseEnter:Connect(function()
		if ui.section:match(Example.Name) then
			return
		end

		TweenService:Create(Example, TweenInfo.new(0.65, Enum.EasingStyle.Exponential), {ImageTransparency = 0.35}):Play()
	end)

	Example.MouseLeave:Connect(function()
		if ui.section:match(Example.Name) then
			return
		end

		TweenService:Create(Example, TweenInfo.new(0.65, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()
	end)

	Example.MouseButton1Up:Connect(function()
		ui.section = Example.Name

		for _index, section in ui.background.Sections:GetChildren() do
			if section:IsA("ImageButton") then
				if section.Name:match(name) then
					animate_elements(1.65)

					TweenService:Create(section, TweenInfo.new(0.65, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
				else
					TweenService:Create(section, TweenInfo.new(0.45, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()
				end
			end
		end
	end)

	Example.TouchTap:Connect(function()
		ui.section = Example.Name

		for _index, section in ui.background.Sections:GetChildren() do
			if section:IsA("ImageButton") then
				if section.Name:match(name) then
					animate_elements(1.65)

					TweenService:Create(section, TweenInfo.new(0.65, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
				else
					TweenService:Create(section, TweenInfo.new(0.45, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()
				end
			end
		end
	end)
end

function ui.create_toggle(name: string, section: string, callback)
	callback = callback or function() end
	local toggled = false
	local keybind = nil

	local Example = Instance.new("Frame")
	local UICorner = Instance.new("UICorner")
	local Hitbox = Instance.new("TextButton")
	local Title = Instance.new("TextLabel")
	local Toggle = Instance.new("Frame")
	local UICorner_2 = Instance.new("UICorner")
	local checkmark = Instance.new("ImageButton")
	local UIStroke = Instance.new("UIStroke")
	local UIStroke_2 = Instance.new("UIStroke")
	local Bind = Instance.new("Frame")
	local UICorner_3 = Instance.new("UICorner")
	local Title_2 = Instance.new("TextLabel")
	local UIStroke_3 = Instance.new("UIStroke")
	local KeyHitbox = Instance.new("TextButton")

	Example.Name = name
	Example.Parent = ui.background.Functions
	Example.BackgroundColor3 = Color3.fromRGB(12, 12, 10)
	Example.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Example.BorderSizePixel = 0
	Example.Position = UDim2.new(0, 0, 0.017997425, 0)
	Example.Size = UDim2.new(0.976999998, 0, 0.0540000014, 0)
	Example.ZIndex = 10

	UICorner.CornerRadius = UDim.new(0, 10)
	UICorner.Parent = Example

	Hitbox.Name = "Hitbox"
	Hitbox.Parent = Example
	Hitbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Hitbox.BackgroundTransparency = 1.000
	Hitbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Hitbox.BorderSizePixel = 0
	Hitbox.Size = UDim2.new(0.86571455, 0, 1, 0)
	Hitbox.ZIndex = 15
	Hitbox.Font = Enum.Font.SourceSans
	Hitbox.TextColor3 = Color3.fromRGB(0, 0, 0)
	Hitbox.TextSize = 1.000
	Hitbox.TextTransparency = 1.000

	Title.Name = "Title"
	Title.Parent = Example
	Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Title.BackgroundTransparency = 1.000
	Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Title.BorderSizePixel = 0
	Title.Position = UDim2.new(0.10201145, 0, 0.272951514, 0)
	Title.Size = UDim2.new(0.291553348, 0, 0.441653311, 0)
	Title.ZIndex = 10
	Title.Font = Enum.Font.GothamBold
	Title.Text = name
	Title.TextColor3 = Color3.fromRGB(231, 231, 243)
	Title.TextScaled = true
	Title.TextSize = 14.000
	Title.TextWrapped = true
	Title.TextXAlignment = Enum.TextXAlignment.Left

	Toggle.Name = "Toggle"
	Toggle.Parent = Example
	Toggle.BackgroundColor3 = Color3.fromRGB(9, 9, 9)
	Toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Toggle.BorderSizePixel = 0
	Toggle.Position = UDim2.new(0.0322221965, 0, 0.274039954, 0)
	Toggle.Size = UDim2.new(0.0437330045, 0, 0.441653311, 0)
	Toggle.ZIndex = 15

	UICorner_2.CornerRadius = UDim.new(0, 3)
	UICorner_2.Parent = Toggle

	checkmark.Name = "checkmark"
	checkmark.Parent = Toggle
	checkmark.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	checkmark.BackgroundTransparency = 1.000
	checkmark.BorderColor3 = Color3.fromRGB(0, 0, 0)
	checkmark.BorderSizePixel = 0
	checkmark.Position = UDim2.new(0.275000006, 0, 0.200000003, 0)
	checkmark.Size = UDim2.new(0.545454562, 0, 0.600000024, 0)
	checkmark.ZIndex = 15
	checkmark.Image = "rbxassetid://9754130783"
	checkmark.ImageTransparency = 1.000

	UIStroke.Parent = Toggle
	UIStroke.Color = Color3.fromRGB(48, 48, 48)
	UIStroke.Transparency = 0.500
	UIStroke.Thickness = 1.100
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

	UIStroke_2.Parent = Example
	UIStroke_2.Color = Color3.fromRGB(48, 48, 48)
	UIStroke_2.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

	Bind.Name = "Bind"
	Bind.Parent = Example
	Bind.BackgroundColor3 = Color3.fromRGB(9, 9, 9)
	Bind.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Bind.BorderSizePixel = 0
	Bind.Position = UDim2.new(0.915752351, 0, 0.274039209, 0)
	Bind.Size = UDim2.new(0.0437330045, 0, 0.441653311, 0)
	Bind.ZIndex = 15

	UICorner_3.CornerRadius = UDim.new(0, 3)
	UICorner_3.Parent = Bind

	Title_2.Name = "Title"
	Title_2.Parent = Bind
	Title_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Title_2.BackgroundTransparency = 1.000
	Title_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Title_2.BorderSizePixel = 0
	Title_2.Position = UDim2.new(0.256999999, 0, 0.179000005, 0)
	Title_2.Size = UDim2.new(0.511211991, 0, 0.600000024, 0)
	Title_2.ZIndex = 15
	Title_2.Font = Enum.Font.GothamBold
	Title_2.Text = "..."
	Title_2.TextTransparency = 1
	Title_2.TextColor3 = Color3.fromRGB(231, 231, 243)
	Title_2.TextScaled = true
	Title_2.TextSize = 14.000
	Title_2.TextWrapped = true

	UIStroke_3.Parent = Bind
	UIStroke_3.Color = Color3.fromRGB(48, 48, 48)
	UIStroke_3.Transparency = 0.500
	UIStroke_3.Thickness = 1.100
	UIStroke_3.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

	KeyHitbox.Name = "KeyHitbox"
	KeyHitbox.Parent = Example
	KeyHitbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	KeyHitbox.BackgroundTransparency = 1.000
	KeyHitbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
	KeyHitbox.BorderSizePixel = 0
	KeyHitbox.Position = UDim2.new(0.865714431, 0, 0, 0)
	KeyHitbox.Size = UDim2.new(0.134285703, 0, 1, 0)
	KeyHitbox.ZIndex = 15
	KeyHitbox.Font = Enum.Font.GothamBold
	KeyHitbox.TextColor3 = Color3.fromRGB(0, 0, 0)
	KeyHitbox.TextSize = 1.000
	KeyHitbox.TextTransparency = 1.000

	game:GetService("RunService").Heartbeat:Connect(function()
		if keybind ~= nil then
			Title_2.TextTransparency = 0
		end

		if not section:match(ui.section) then
			Example.Visible = false
		else
			Example.Visible = true
		end
	end)

	UserInputService.InputEnded:Connect(function(input, is_event)
		if is_event or keybind == nil then
			return
		end

		if input.KeyCode == keybind then
			toggled = not toggled

			callback(toggled)

			if toggled then
				ui.notify.render_Notify(`{name} enabled!`, 4)
				
				TweenService:Create(checkmark, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
					ImageTransparency = 0.25,
				}):Play()
			else
				ui.notify.render_Notify(`{name} disabled!`, 4)
				
				TweenService:Create(checkmark, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
					ImageTransparency = 1,
				}):Play()
			end
		end
	end)

	KeyHitbox.MouseButton1Up:Connect(function()
		local temp_key = nil

		repeat 
			temp_key = UserInputService.InputEnded:Wait() 
		until temp_key.KeyCode ~= Enum.KeyCode.Unknown

		if temp_key.KeyCode == Enum.KeyCode.Escape or temp_key.KeyCode == Enum.KeyCode.Insert or temp_key.KeyCode == Enum.KeyCode.RightShift then
			keybind = nil

			TweenService:Create(Title_2, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
				TextTransparency = 1,
			}):Play()
			Title_2.Text = '...'

			return
		end

		keybind = temp_key.KeyCode
		Title_2.Text = temp_key.KeyCode.Name

		temp_key = nil

		TweenService:Create(Title_2, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
			TextTransparency = 0,
		}):Play()
	end)

	KeyHitbox.MouseEnter:Connect(function()
		if keybind ~= nil then
			return
		end

		TweenService:Create(Title_2, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
			TextTransparency = 0.645,
		}):Play()
	end)

	KeyHitbox.MouseLeave:Connect(function()
		if keybind ~= nil then
			return
		end

		TweenService:Create(Title_2, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
			TextTransparency = 1,
		}):Play()
	end)

	Hitbox.MouseEnter:Connect(function()
		if toggled then
			return
		end

		TweenService:Create(checkmark, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
			ImageTransparency = 0.645,
		}):Play()
	end)

	Hitbox.MouseLeave:Connect(function()
		if toggled then
			return
		end

		TweenService:Create(checkmark, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
			ImageTransparency = 1,
		}):Play()
	end)

	Hitbox.MouseButton1Up:Connect(function()
		toggled = not toggled

		callback(toggled)
		
		if toggled then
			TweenService:Create(checkmark, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
				ImageTransparency = 0.25,
			}):Play()
		else
			TweenService:Create(checkmark, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
				ImageTransparency = 1,
			}):Play()
		end
	end)

	Hitbox.TouchTap:Connect(function()
		toggled = not toggled

		callback(toggled)
		
		if toggled then
			TweenService:Create(checkmark, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
				ImageTransparency = 0.25,
			}):Play()
		else
			TweenService:Create(checkmark, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {
				ImageTransparency = 1,
			}):Play()
		end
	end)
end

return ui
